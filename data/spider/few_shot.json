[{"query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "question": "How many concerts occurred in 2014 or 2015?", "db_id": "concert_singer", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_column_types": ["text", "number", "text", "text", "number", "number", "number", "number", "number", "text", "text", "text", "text", "number", "others", "number", "text", "text", "text", "text", "number", "text"], "db_primary_keys": {"column_id": [1, 8, 15, 20]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "question": "Show the stadium name and the number of concerts in each stadium.", "db_id": "concert_singer", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_column_types": ["text", "number", "text", "text", "number", "number", "number", "number", "number", "text", "text", "text", "text", "number", "others", "number", "text", "text", "text", "text", "number", "text"], "db_primary_keys": {"column_id": [1, 8, 15, 20]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"query": "select avg(capacity) ,  max(capacity) from stadium", "question": "What is the average and maximum capacities for all stadiums ?", "db_id": "concert_singer", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_column_types": ["text", "number", "text", "text", "number", "number", "number", "number", "number", "text", "text", "text", "text", "number", "others", "number", "text", "text", "text", "text", "number", "text"], "db_primary_keys": {"column_id": [1, 8, 15, 20]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "question": "Find the number of concerts happened in the stadium with the highest capacity .", "db_id": "concert_singer", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_column_types": ["text", "number", "text", "text", "number", "number", "number", "number", "number", "text", "text", "text", "text", "number", "others", "number", "text", "text", "text", "text", "number", "text"], "db_primary_keys": {"column_id": [1, 8, 15, 20]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "question": "What are the names and release years for all the songs of the youngest singer?", "db_id": "concert_singer", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_column_types": ["text", "number", "text", "text", "number", "number", "number", "number", "number", "text", "text", "text", "text", "number", "others", "number", "text", "text", "text", "text", "number", "text"], "db_primary_keys": {"column_id": [1, 8, 15, 20]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"query": "SELECT country ,  count(*) FROM singer GROUP BY country", "question": "How many singers are from each country?", "db_id": "concert_singer", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_column_types": ["text", "number", "text", "text", "number", "number", "number", "number", "number", "text", "text", "text", "text", "number", "others", "number", "text", "text", "text", "text", "number", "text"], "db_primary_keys": {"column_id": [1, 8, 15, 20]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "question": "What is the name and capacity for the stadium with the highest average attendance?", "db_id": "concert_singer", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_column_types": ["text", "number", "text", "text", "number", "number", "number", "number", "number", "text", "text", "text", "text", "number", "others", "number", "text", "text", "text", "text", "number", "text"], "db_primary_keys": {"column_id": [1, 8, 15, 20]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "question": "What are all the song names by singers who are older than average?", "db_id": "concert_singer", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_column_types": ["text", "number", "text", "text", "number", "number", "number", "number", "number", "text", "text", "text", "text", "number", "others", "number", "text", "text", "text", "text", "number", "text"], "db_primary_keys": {"column_id": [1, 8, 15, 20]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "db_id": "pets_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "pet_age", "weight"]}, "db_column_types": ["text", "number", "text", "text", "number", "text", "number", "number", "text", "number", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 11]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}}, {"query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "question": "What is the average and maximum age for each pet type?", "db_id": "pets_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "pet_age", "weight"]}, "db_column_types": ["text", "number", "text", "text", "number", "text", "number", "number", "text", "number", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 11]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}}, {"query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "db_id": "pets_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "pet_age", "weight"]}, "db_column_types": ["text", "number", "text", "text", "number", "text", "number", "number", "text", "number", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 11]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}}, {"query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "question": "Find the last name of the student who has a cat that is age 3.", "db_id": "pets_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "pet_age", "weight"]}, "db_column_types": ["text", "number", "text", "text", "number", "text", "number", "number", "text", "number", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 11]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}}, {"query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "question": "Find the first name of students who have cat or dog pet.", "db_id": "pets_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "pet_age", "weight"]}, "db_column_types": ["text", "number", "text", "text", "number", "text", "number", "number", "text", "number", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 11]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}}, {"query": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'", "question": "Find the first name of students who have both cat and dog pets .", "db_id": "pets_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "pet_age", "weight"]}, "db_column_types": ["text", "number", "text", "text", "number", "text", "number", "number", "text", "number", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 11]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}}, {"query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "question": "Find the average and maximum age for each type of pet.", "db_id": "pets_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "pet_age", "weight"]}, "db_column_types": ["text", "number", "text", "text", "number", "text", "number", "number", "text", "number", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 11]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}}, {"query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "question": "Find the first name and age of students who have a pet.", "db_id": "pets_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "pet_age", "weight"]}, "db_column_types": ["text", "number", "text", "text", "number", "text", "number", "number", "text", "number", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 11]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}}, {"query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "db_id": "car_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "text", "text", "number", "number", "text", "number", "text", "text", "number", "text", "number", "number", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 3, 6, 10, 13, 16]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}}, {"query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "question": "What is the model of the car with the smallest amount of horsepower?", "db_id": "car_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "text", "text", "number", "number", "text", "number", "text", "text", "number", "text", "number", "number", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 3, 6, 10, 13, 16]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}}, {"query": "SELECT count(*) FROM COUNTRIES;", "question": "How many countries exist?", "db_id": "car_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "text", "text", "number", "number", "text", "number", "text", "text", "number", "text", "number", "number", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 3, 6, 10, 13, 16]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}}, {"query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "question": "How many car models are produced in the usa?", "db_id": "car_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "text", "text", "number", "number", "text", "number", "text", "text", "number", "text", "number", "number", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 3, 6, 10, 13, 16]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}}, {"query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "question": "What is the number of carsw ith over 6 cylinders?", "db_id": "car_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "text", "text", "number", "number", "text", "number", "text", "text", "number", "text", "number", "number", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 3, 6, 10, 13, 16]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}}, {"query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "question": "How many car models were produced by the maker with full name American Motor Company?", "db_id": "car_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "text", "text", "number", "number", "text", "number", "text", "text", "number", "text", "number", "number", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 3, 6, 10, 13, 16]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}}, {"query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "question": "What is the name of the country with the most car makers?", "db_id": "car_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "text", "text", "number", "number", "text", "number", "text", "text", "number", "text", "number", "number", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 3, 6, 10, 13, 16]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}}, {"query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "question": "Find the model of the car whose weight is below the average weight.", "db_id": "car_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "text", "text", "number", "number", "text", "number", "text", "text", "number", "text", "number", "number", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 3, 6, 10, 13, 16]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}}, {"query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "db_id": "flight_2", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["airlines", "airports", "flights"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "uid", "Airline", "Abbreviation", "Country", "City", "AirportCode", "AirportName", "Country", "CountryAbbrev", "Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text", "text"], "db_primary_keys": {"column_id": [1, 6, 10]}, "db_foreign_keys": {"column_id": [13, 12], "other_column_id": [6, 6]}}, {"query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "question": "Find all airlines that have fewer than 200 flights.", "db_id": "flight_2", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["airlines", "airports", "flights"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "uid", "Airline", "Abbreviation", "Country", "City", "AirportCode", "AirportName", "Country", "CountryAbbrev", "Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text", "text"], "db_primary_keys": {"column_id": [1, 6, 10]}, "db_foreign_keys": {"column_id": [13, 12], "other_column_id": [6, 6]}}, {"query": "SELECT count(*) FROM AIRPORTS", "question": "How many airports do we have?", "db_id": "flight_2", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["airlines", "airports", "flights"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "uid", "Airline", "Abbreviation", "Country", "City", "AirportCode", "AirportName", "Country", "CountryAbbrev", "Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text", "text"], "db_primary_keys": {"column_id": [1, 6, 10]}, "db_foreign_keys": {"column_id": [13, 12], "other_column_id": [6, 6]}}, {"query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "question": "How many flights have destination ATO?", "db_id": "flight_2", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["airlines", "airports", "flights"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "uid", "Airline", "Abbreviation", "Country", "City", "AirportCode", "AirportName", "Country", "CountryAbbrev", "Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text", "text"], "db_primary_keys": {"column_id": [1, 6, 10]}, "db_foreign_keys": {"column_id": [13, 12], "other_column_id": [6, 6]}}, {"query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "question": "What are airlines that have flights arriving at airport 'AHD'?", "db_id": "flight_2", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["airlines", "airports", "flights"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "uid", "Airline", "Abbreviation", "Country", "City", "AirportCode", "AirportName", "Country", "CountryAbbrev", "Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text", "text"], "db_primary_keys": {"column_id": [1, 6, 10]}, "db_foreign_keys": {"column_id": [13, 12], "other_column_id": [6, 6]}}, {"query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "question": "Which flight numbers correspond to United Airlines flights?", "db_id": "flight_2", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["airlines", "airports", "flights"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "uid", "Airline", "Abbreviation", "Country", "City", "AirportCode", "AirportName", "Country", "CountryAbbrev", "Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text", "text"], "db_primary_keys": {"column_id": [1, 6, 10]}, "db_foreign_keys": {"column_id": [13, 12], "other_column_id": [6, 6]}}, {"query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "question": "Which abbreviation corresponds to Jetblue Airways?", "db_id": "flight_2", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["airlines", "airports", "flights"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "uid", "Airline", "Abbreviation", "Country", "City", "AirportCode", "AirportName", "Country", "CountryAbbrev", "Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text", "text"], "db_primary_keys": {"column_id": [1, 6, 10]}, "db_foreign_keys": {"column_id": [13, 12], "other_column_id": [6, 6]}}, {"query": "SELECT count(*) FROM FLIGHTS", "question": "How many flights do we have?", "db_id": "flight_2", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["airlines", "airports", "flights"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "uid", "Airline", "Abbreviation", "Country", "City", "AirportCode", "AirportName", "Country", "CountryAbbrev", "Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text", "text"], "db_primary_keys": {"column_id": [1, 6, 10]}, "db_foreign_keys": {"column_id": [13, 12], "other_column_id": [6, 6]}}, {"query": "SELECT count(DISTINCT LOCATION) FROM shop", "question": "How many different store locations are there?", "db_id": "employee_hire_evaluation", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["employee", "shop", "hiring", "evaluation"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3], "column_name": ["*", "Employee_ID", "Name", "Age", "City", "Shop_ID", "Name", "Location", "District", "Number_products", "Manager_name", "Shop_ID", "Employee_ID", "Start_from", "Is_full_time", "Employee_ID", "Year_awarded", "Bonus"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "text", "text", "text", "number", "text", "number", "number", "text", "others", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 5, 12, 15]}, "db_foreign_keys": {"column_id": [12, 11, 15], "other_column_id": [1, 5, 1]}}, {"query": "SELECT count(*) FROM employee", "question": "How many employees are there?", "db_id": "employee_hire_evaluation", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["employee", "shop", "hiring", "evaluation"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3], "column_name": ["*", "Employee_ID", "Name", "Age", "City", "Shop_ID", "Name", "Location", "District", "Number_products", "Manager_name", "Shop_ID", "Employee_ID", "Start_from", "Is_full_time", "Employee_ID", "Year_awarded", "Bonus"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "text", "text", "text", "number", "text", "number", "number", "text", "others", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 5, 12, 15]}, "db_foreign_keys": {"column_id": [12, 11, 15], "other_column_id": [1, 5, 1]}}, {"query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "db_id": "employee_hire_evaluation", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["employee", "shop", "hiring", "evaluation"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3], "column_name": ["*", "Employee_ID", "Name", "Age", "City", "Shop_ID", "Name", "Location", "District", "Number_products", "Manager_name", "Shop_ID", "Employee_ID", "Start_from", "Is_full_time", "Employee_ID", "Year_awarded", "Bonus"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "text", "text", "text", "number", "text", "number", "number", "text", "others", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 5, 12, 15]}, "db_foreign_keys": {"column_id": [12, 11, 15], "other_column_id": [1, 5, 1]}}, {"query": "SELECT * FROM hiring", "question": "Give me all the information about hiring.", "db_id": "employee_hire_evaluation", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["employee", "shop", "hiring", "evaluation"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3], "column_name": ["*", "Employee_ID", "Name", "Age", "City", "Shop_ID", "Name", "Location", "District", "Number_products", "Manager_name", "Shop_ID", "Employee_ID", "Start_from", "Is_full_time", "Employee_ID", "Year_awarded", "Bonus"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "text", "text", "text", "number", "text", "number", "number", "text", "others", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 5, 12, 15]}, "db_foreign_keys": {"column_id": [12, 11, 15], "other_column_id": [1, 5, 1]}}, {"query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "question": "Find the names of employees who never won any award in the evaluation.", "db_id": "employee_hire_evaluation", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["employee", "shop", "hiring", "evaluation"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3], "column_name": ["*", "Employee_ID", "Name", "Age", "City", "Shop_ID", "Name", "Location", "District", "Number_products", "Manager_name", "Shop_ID", "Employee_ID", "Start_from", "Is_full_time", "Employee_ID", "Year_awarded", "Bonus"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "text", "text", "text", "number", "text", "number", "number", "text", "others", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 5, 12, 15]}, "db_foreign_keys": {"column_id": [12, 11, 15], "other_column_id": [1, 5, 1]}}, {"query": "SELECT count(DISTINCT LOCATION) FROM shop", "question": "Count the number of distinct store locations.", "db_id": "employee_hire_evaluation", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["employee", "shop", "hiring", "evaluation"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3], "column_name": ["*", "Employee_ID", "Name", "Age", "City", "Shop_ID", "Name", "Location", "District", "Number_products", "Manager_name", "Shop_ID", "Employee_ID", "Start_from", "Is_full_time", "Employee_ID", "Year_awarded", "Bonus"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "text", "text", "text", "number", "text", "number", "number", "text", "others", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 5, 12, 15]}, "db_foreign_keys": {"column_id": [12, 11, 15], "other_column_id": [1, 5, 1]}}, {"query": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "question": "find the minimum and maximum number of products of all stores.", "db_id": "employee_hire_evaluation", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["employee", "shop", "hiring", "evaluation"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3], "column_name": ["*", "Employee_ID", "Name", "Age", "City", "Shop_ID", "Name", "Location", "District", "Number_products", "Manager_name", "Shop_ID", "Employee_ID", "Start_from", "Is_full_time", "Employee_ID", "Year_awarded", "Bonus"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "text", "text", "text", "number", "text", "number", "number", "text", "others", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 5, 12, 15]}, "db_foreign_keys": {"column_id": [12, 11, 15], "other_column_id": [1, 5, 1]}}, {"query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "db_id": "employee_hire_evaluation", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["employee", "shop", "hiring", "evaluation"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3], "column_name": ["*", "Employee_ID", "Name", "Age", "City", "Shop_ID", "Name", "Location", "District", "Number_products", "Manager_name", "Shop_ID", "Employee_ID", "Start_from", "Is_full_time", "Employee_ID", "Year_awarded", "Bonus"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "text", "text", "text", "number", "text", "number", "number", "text", "others", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 5, 12, 15]}, "db_foreign_keys": {"column_id": [12, 11, 15], "other_column_id": [1, 5, 1]}}, {"query": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "question": "What the smallest version number and its template type code?", "db_id": "cre_Doc_Template_Mgt", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_column_types": ["text", "text", "text", "number", "number", "text", "time", "time", "text", "number", "number", "text", "text", "text", "number", "number", "text", "text"], "db_primary_keys": {"column_id": [1, 3, 9, 14]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "question": "What are the codes of template types that have fewer than 3 templates?", "db_id": "cre_Doc_Template_Mgt", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_column_types": ["text", "text", "text", "number", "number", "text", "time", "time", "text", "number", "number", "text", "text", "text", "number", "number", "text", "text"], "db_primary_keys": {"column_id": [1, 3, 9, 14]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "question": "How many documents are using the template with type code 'PPT'?", "db_id": "cre_Doc_Template_Mgt", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_column_types": ["text", "text", "text", "number", "number", "text", "time", "time", "text", "number", "number", "text", "text", "text", "number", "number", "text", "text"], "db_primary_keys": {"column_id": [1, 3, 9, 14]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "question": "Show all paragraph texts for the document \"Customer reviews\".", "db_id": "cre_Doc_Template_Mgt", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_column_types": ["text", "text", "text", "number", "number", "text", "time", "time", "text", "number", "number", "text", "text", "text", "number", "number", "text", "text"], "db_primary_keys": {"column_id": [1, 3, 9, 14]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "question": "Give the ids of documents that have between one and two paragraphs.", "db_id": "cre_Doc_Template_Mgt", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_column_types": ["text", "text", "text", "number", "number", "text", "time", "time", "text", "number", "number", "text", "text", "text", "number", "number", "text", "text"], "db_primary_keys": {"column_id": [1, 3, 9, 14]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "question": "Return the ids corresponding to templates with the description 'Presentation'.", "db_id": "cre_Doc_Template_Mgt", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_column_types": ["text", "text", "text", "number", "number", "text", "time", "time", "text", "number", "number", "text", "text", "text", "number", "number", "text", "text"], "db_primary_keys": {"column_id": [1, 3, 9, 14]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "question": "What are the ids, version numbers, and type codes for each template?", "db_id": "cre_Doc_Template_Mgt", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_column_types": ["text", "text", "text", "number", "number", "text", "time", "time", "text", "number", "number", "text", "text", "text", "number", "number", "text", "text"], "db_primary_keys": {"column_id": [1, 3, 9, 14]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"query": "SELECT DISTINCT template_type_code FROM Templates", "question": "Show all distinct template type codes for all templates.", "db_id": "cre_Doc_Template_Mgt", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_column_types": ["text", "text", "text", "number", "number", "text", "time", "time", "text", "number", "number", "text", "text", "text", "number", "number", "text", "text"], "db_primary_keys": {"column_id": [1, 3, 9, 14]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "question": "What are the names of the teachers who are aged either 32 or 33?", "db_id": "course_teach", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["course", "teacher", "course_arrange"], "db_column_names": {"table_id": [-1, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2], "column_name": ["*", "Course_ID", "Staring_Date", "Course", "Teacher_ID", "Name", "Age", "Hometown", "Course_ID", "Teacher_ID", "Grade"]}, "db_column_types": ["text", "number", "text", "text", "number", "text", "text", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 4, 8]}, "db_foreign_keys": {"column_id": [9, 8], "other_column_id": [4, 1]}}, {"query": "SELECT Name FROM teacher ORDER BY Age ASC", "question": "What are the names of the teachers ordered by ascending age?", "db_id": "course_teach", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["course", "teacher", "course_arrange"], "db_column_names": {"table_id": [-1, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2], "column_name": ["*", "Course_ID", "Staring_Date", "Course", "Teacher_ID", "Name", "Age", "Hometown", "Course_ID", "Teacher_ID", "Grade"]}, "db_column_types": ["text", "number", "text", "text", "number", "text", "text", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 4, 8]}, "db_foreign_keys": {"column_id": [9, 8], "other_column_id": [4, 1]}}, {"query": "SELECT Age ,  Hometown FROM teacher", "question": "What is the age and hometown of every teacher?", "db_id": "course_teach", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["course", "teacher", "course_arrange"], "db_column_names": {"table_id": [-1, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2], "column_name": ["*", "Course_ID", "Staring_Date", "Course", "Teacher_ID", "Name", "Age", "Hometown", "Course_ID", "Teacher_ID", "Grade"]}, "db_column_types": ["text", "number", "text", "text", "number", "text", "text", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 4, 8]}, "db_foreign_keys": {"column_id": [9, 8], "other_column_id": [4, 1]}}, {"query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "question": "What are the towns from which at least two teachers come from?", "db_id": "course_teach", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["course", "teacher", "course_arrange"], "db_column_names": {"table_id": [-1, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2], "column_name": ["*", "Course_ID", "Staring_Date", "Course", "Teacher_ID", "Name", "Age", "Hometown", "Course_ID", "Teacher_ID", "Grade"]}, "db_column_types": ["text", "number", "text", "text", "number", "text", "text", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 4, 8]}, "db_foreign_keys": {"column_id": [9, 8], "other_column_id": [4, 1]}}, {"query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "question": "Show the hometowns shared by at least two teachers.", "db_id": "course_teach", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["course", "teacher", "course_arrange"], "db_column_names": {"table_id": [-1, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2], "column_name": ["*", "Course_ID", "Staring_Date", "Course", "Teacher_ID", "Name", "Age", "Hometown", "Course_ID", "Teacher_ID", "Grade"]}, "db_column_types": ["text", "number", "text", "text", "number", "text", "text", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 4, 8]}, "db_foreign_keys": {"column_id": [9, 8], "other_column_id": [4, 1]}}, {"query": "SELECT count(*) FROM teacher", "question": "What is the total count of teachers?", "db_id": "course_teach", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["course", "teacher", "course_arrange"], "db_column_names": {"table_id": [-1, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2], "column_name": ["*", "Course_ID", "Staring_Date", "Course", "Teacher_ID", "Name", "Age", "Hometown", "Course_ID", "Teacher_ID", "Grade"]}, "db_column_types": ["text", "number", "text", "text", "number", "text", "text", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 4, 8]}, "db_foreign_keys": {"column_id": [9, 8], "other_column_id": [4, 1]}}, {"query": "SELECT Age ,  Hometown FROM teacher", "question": "What are the age and hometown of teachers?", "db_id": "course_teach", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["course", "teacher", "course_arrange"], "db_column_names": {"table_id": [-1, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2], "column_name": ["*", "Course_ID", "Staring_Date", "Course", "Teacher_ID", "Name", "Age", "Hometown", "Course_ID", "Teacher_ID", "Grade"]}, "db_column_types": ["text", "number", "text", "text", "number", "text", "text", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 4, 8]}, "db_foreign_keys": {"column_id": [9, 8], "other_column_id": [4, 1]}}, {"query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "question": "What is the name of each teacher and what course they teach?", "db_id": "course_teach", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["course", "teacher", "course_arrange"], "db_column_names": {"table_id": [-1, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2], "column_name": ["*", "Course_ID", "Staring_Date", "Course", "Teacher_ID", "Name", "Age", "Hometown", "Course_ID", "Teacher_ID", "Grade"]}, "db_column_types": ["text", "number", "text", "text", "number", "text", "text", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 4, 8]}, "db_foreign_keys": {"column_id": [9, 8], "other_column_id": [4, 1]}}, {"query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "question": "Find the name and age of the visitor who bought the most tickets at once.", "db_id": "museum_visit", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["museum", "visitor", "visit"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "Museum_ID", "Name", "Num_of_Staff", "Open_Year", "ID", "Name", "Level_of_membership", "Age", "Museum_ID", "visitor_ID", "Num_of_Ticket", "Total_spent"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "text", "number", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 5, 9]}, "db_foreign_keys": {"column_id": [10, 9], "other_column_id": [5, 1]}}, {"query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "question": "What is the average age of the visitors whose membership level is not higher than 4?", "db_id": "museum_visit", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["museum", "visitor", "visit"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "Museum_ID", "Name", "Num_of_Staff", "Open_Year", "ID", "Name", "Level_of_membership", "Age", "Museum_ID", "visitor_ID", "Num_of_Ticket", "Total_spent"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "text", "number", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 5, 9]}, "db_foreign_keys": {"column_id": [10, 9], "other_column_id": [5, 1]}}, {"query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "question": "Find the average number of staff working for the museums that were open before 2009.", "db_id": "museum_visit", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["museum", "visitor", "visit"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "Museum_ID", "Name", "Num_of_Staff", "Open_Year", "ID", "Name", "Level_of_membership", "Age", "Museum_ID", "visitor_ID", "Num_of_Ticket", "Total_spent"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "text", "number", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 5, 9]}, "db_foreign_keys": {"column_id": [10, 9], "other_column_id": [5, 1]}}, {"query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "db_id": "museum_visit", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["museum", "visitor", "visit"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "Museum_ID", "Name", "Num_of_Staff", "Open_Year", "ID", "Name", "Level_of_membership", "Age", "Museum_ID", "visitor_ID", "Num_of_Ticket", "Total_spent"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "text", "number", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 5, 9]}, "db_foreign_keys": {"column_id": [10, 9], "other_column_id": [5, 1]}}, {"query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "question": "How many museums were opened after 2013 or before 2008?", "db_id": "museum_visit", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["museum", "visitor", "visit"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "Museum_ID", "Name", "Num_of_Staff", "Open_Year", "ID", "Name", "Level_of_membership", "Age", "Museum_ID", "visitor_ID", "Num_of_Ticket", "Total_spent"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "text", "number", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 5, 9]}, "db_foreign_keys": {"column_id": [10, 9], "other_column_id": [5, 1]}}, {"query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011", "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "db_id": "museum_visit", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["museum", "visitor", "visit"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "Museum_ID", "Name", "Num_of_Staff", "Open_Year", "ID", "Name", "Level_of_membership", "Age", "Museum_ID", "visitor_ID", "Num_of_Ticket", "Total_spent"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "text", "number", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 5, 9]}, "db_foreign_keys": {"column_id": [10, 9], "other_column_id": [5, 1]}}, {"query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "db_id": "museum_visit", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["museum", "visitor", "visit"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "Museum_ID", "Name", "Num_of_Staff", "Open_Year", "ID", "Name", "Level_of_membership", "Age", "Museum_ID", "visitor_ID", "Num_of_Ticket", "Total_spent"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "text", "number", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 5, 9]}, "db_foreign_keys": {"column_id": [10, 9], "other_column_id": [5, 1]}}, {"query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "question": "What are the opening year and staff number of the museum named Plaza Museum?", "db_id": "museum_visit", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["museum", "visitor", "visit"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "Museum_ID", "Name", "Num_of_Staff", "Open_Year", "ID", "Name", "Level_of_membership", "Age", "Museum_ID", "visitor_ID", "Num_of_Ticket", "Total_spent"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "text", "number", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 5, 9]}, "db_foreign_keys": {"column_id": [10, 9], "other_column_id": [5, 1]}}, {"query": "SELECT count(DISTINCT loser_name) FROM matches", "question": "How many different loser names are there?", "db_id": "wta_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_column_types": ["text", "number", "text", "text", "text", "time", "text", "number", "number", "number", "text", "text", "number", "number", "text", "text", "number", "number", "number", "number", "number", "text", "text", "text", "time", "text", "text", "text", "number", "text", "text", "number", "number", "text", "text", "number", "number", "number", "number", "time", "number", "number", "number", "number"], "db_primary_keys": {"column_id": [1]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "question": "Find the total number of tours for each ranking date.", "db_id": "wta_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_column_types": ["text", "number", "text", "text", "text", "time", "text", "number", "number", "number", "text", "text", "number", "number", "text", "text", "number", "number", "number", "number", "number", "text", "text", "text", "time", "text", "text", "text", "number", "text", "text", "number", "number", "text", "text", "number", "number", "number", "number", "time", "number", "number", "number", "number"], "db_primary_keys": {"column_id": [1]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "question": "What are the full names of all left handed players, in order of birth date?", "db_id": "wta_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_column_types": ["text", "number", "text", "text", "text", "time", "text", "number", "number", "number", "text", "text", "number", "number", "text", "text", "number", "number", "number", "number", "number", "text", "text", "text", "time", "text", "text", "text", "number", "text", "text", "number", "number", "text", "text", "number", "number", "number", "number", "time", "number", "number", "number", "number"], "db_primary_keys": {"column_id": [1]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "question": "Find the number of matches happened in each year.", "db_id": "wta_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_column_types": ["text", "number", "text", "text", "text", "time", "text", "number", "number", "number", "text", "text", "number", "number", "text", "text", "number", "number", "number", "number", "number", "text", "text", "text", "time", "text", "text", "text", "number", "text", "text", "number", "number", "text", "text", "number", "number", "number", "number", "time", "number", "number", "number", "number"], "db_primary_keys": {"column_id": [1]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "question": "What are the names of the winner and loser who played in the longest match?", "db_id": "wta_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_column_types": ["text", "number", "text", "text", "text", "time", "text", "number", "number", "number", "text", "text", "number", "number", "text", "text", "number", "number", "number", "number", "number", "text", "text", "text", "time", "text", "text", "text", "number", "text", "text", "number", "number", "text", "text", "number", "number", "number", "number", "time", "number", "number", "number", "number"], "db_primary_keys": {"column_id": [1]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "db_id": "wta_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_column_types": ["text", "number", "text", "text", "text", "time", "text", "number", "number", "number", "text", "text", "number", "number", "text", "text", "number", "number", "number", "number", "number", "text", "text", "text", "time", "text", "text", "text", "number", "text", "text", "number", "number", "text", "text", "number", "number", "number", "number", "time", "number", "number", "number", "number"], "db_primary_keys": {"column_id": [1]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"query": "SELECT count(*) ,  hand FROM players GROUP BY hand", "question": "Find the number of players for each hand type.", "db_id": "wta_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_column_types": ["text", "number", "text", "text", "text", "time", "text", "number", "number", "number", "text", "text", "number", "number", "text", "text", "number", "number", "number", "number", "number", "text", "text", "text", "time", "text", "text", "text", "number", "text", "text", "number", "number", "text", "text", "number", "number", "number", "number", "time", "number", "number", "number", "number"], "db_primary_keys": {"column_id": [1]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "question": "What are the names and ranks of the three youngest winners across all matches?", "db_id": "wta_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_column_types": ["text", "number", "text", "text", "text", "time", "text", "number", "number", "number", "text", "text", "number", "number", "text", "text", "number", "number", "number", "number", "number", "text", "text", "text", "time", "text", "text", "text", "number", "text", "text", "number", "number", "text", "text", "number", "number", "number", "number", "time", "number", "number", "number", "number"], "db_primary_keys": {"column_id": [1]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "db_id": "battle_death", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["battle", "ship", "death"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "id", "name", "date", "bulgarian_commander", "latin_commander", "result", "lost_in_battle", "id", "name", "tonnage", "ship_type", "location", "disposition_of_ship", "caused_by_ship_id", "id", "note", "killed", "injured"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "number", "number", "text", "text", "text", "text", "text", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 8, 15]}, "db_foreign_keys": {"column_id": [7, 14], "other_column_id": [1, 8]}}, {"query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "db_id": "battle_death", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["battle", "ship", "death"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "id", "name", "date", "bulgarian_commander", "latin_commander", "result", "lost_in_battle", "id", "name", "tonnage", "ship_type", "location", "disposition_of_ship", "caused_by_ship_id", "id", "note", "killed", "injured"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "number", "number", "text", "text", "text", "text", "text", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 8, 15]}, "db_foreign_keys": {"column_id": [7, 14], "other_column_id": [1, 8]}}, {"query": "SELECT note FROM death WHERE note LIKE '%East%'", "question": "What are the notes of the death events which has substring 'East'?", "db_id": "battle_death", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["battle", "ship", "death"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "id", "name", "date", "bulgarian_commander", "latin_commander", "result", "lost_in_battle", "id", "name", "tonnage", "ship_type", "location", "disposition_of_ship", "caused_by_ship_id", "id", "note", "killed", "injured"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "number", "number", "text", "text", "text", "text", "text", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 8, 15]}, "db_foreign_keys": {"column_id": [7, 14], "other_column_id": [1, 8]}}, {"query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "question": "How many battles did not lose any ship with tonnage '225'?", "db_id": "battle_death", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["battle", "ship", "death"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "id", "name", "date", "bulgarian_commander", "latin_commander", "result", "lost_in_battle", "id", "name", "tonnage", "ship_type", "location", "disposition_of_ship", "caused_by_ship_id", "id", "note", "killed", "injured"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "number", "number", "text", "text", "text", "text", "text", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 8, 15]}, "db_foreign_keys": {"column_id": [7, 14], "other_column_id": [1, 8]}}, {"query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "db_id": "battle_death", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["battle", "ship", "death"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "id", "name", "date", "bulgarian_commander", "latin_commander", "result", "lost_in_battle", "id", "name", "tonnage", "ship_type", "location", "disposition_of_ship", "caused_by_ship_id", "id", "note", "killed", "injured"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "number", "number", "text", "text", "text", "text", "text", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 8, 15]}, "db_foreign_keys": {"column_id": [7, 14], "other_column_id": [1, 8]}}, {"query": "SELECT max(killed) ,  min(killed) FROM death", "question": "What is maximum and minimum death toll caused each time?", "db_id": "battle_death", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["battle", "ship", "death"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "id", "name", "date", "bulgarian_commander", "latin_commander", "result", "lost_in_battle", "id", "name", "tonnage", "ship_type", "location", "disposition_of_ship", "caused_by_ship_id", "id", "note", "killed", "injured"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "number", "number", "text", "text", "text", "text", "text", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 8, 15]}, "db_foreign_keys": {"column_id": [7, 14], "other_column_id": [1, 8]}}, {"query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "question": "How many ships ended up being 'Captured'?", "db_id": "battle_death", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["battle", "ship", "death"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "id", "name", "date", "bulgarian_commander", "latin_commander", "result", "lost_in_battle", "id", "name", "tonnage", "ship_type", "location", "disposition_of_ship", "caused_by_ship_id", "id", "note", "killed", "injured"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "number", "number", "text", "text", "text", "text", "text", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 8, 15]}, "db_foreign_keys": {"column_id": [7, 14], "other_column_id": [1, 8]}}, {"query": "SELECT name ,  date FROM battle", "question": "List the name, date and result of each battle.", "db_id": "battle_death", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["battle", "ship", "death"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "id", "name", "date", "bulgarian_commander", "latin_commander", "result", "lost_in_battle", "id", "name", "tonnage", "ship_type", "location", "disposition_of_ship", "caused_by_ship_id", "id", "note", "killed", "injured"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "number", "number", "text", "text", "text", "text", "text", "number", "number", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 8, 15]}, "db_foreign_keys": {"column_id": [7, 14], "other_column_id": [1, 8]}}, {"query": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "question": "How many different departments offer degrees?", "db_id": "student_transcripts_tracking", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Addresses", "Courses", "Departments", "Degree_Programs", "Sections", "Semesters", "Students", "Student_Enrolment", "Student_Enrolment_Courses", "Transcripts", "Transcript_Contents"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10], "column_name": ["*", "address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details", "course_id", "course_name", "course_description", "other_details", "department_id", "department_name", "department_description", "other_details", "degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details", "section_id", "course_id", "section_name", "section_description", "other_details", "semester_id", "semester_name", "semester_description", "other_details", "student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details", "student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details", "student_course_id", "course_id", "student_enrolment_id", "transcript_id", "transcript_date", "other_details", "student_course_id", "transcript_id"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "text", "text", "number", "number", "text", "text", "text", "number", "number", "text", "text", "text", "number", "text", "text", "text", "number", "number", "number", "text", "text", "text", "text", "text", "text", "time", "time", "text", "number", "number", "number", "number", "text", "number", "number", "number", "number", "time", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 10, 14, 18, 23, 28, 32, 44, 49, 52]}, "db_foreign_keys": {"column_id": [19, 24, 34, 33, 47, 46, 45, 51, 50, 56, 55], "other_column_id": [14, 10, 1, 1, 32, 28, 18, 44, 10, 52, 49]}}, {"query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "question": "What is the zip code for Port Chelsea?", "db_id": "student_transcripts_tracking", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Addresses", "Courses", "Departments", "Degree_Programs", "Sections", "Semesters", "Students", "Student_Enrolment", "Student_Enrolment_Courses", "Transcripts", "Transcript_Contents"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10], "column_name": ["*", "address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details", "course_id", "course_name", "course_description", "other_details", "department_id", "department_name", "department_description", "other_details", "degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details", "section_id", "course_id", "section_name", "section_description", "other_details", "semester_id", "semester_name", "semester_description", "other_details", "student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details", "student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details", "student_course_id", "course_id", "student_enrolment_id", "transcript_id", "transcript_date", "other_details", "student_course_id", "transcript_id"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "text", "text", "number", "number", "text", "text", "text", "number", "number", "text", "text", "text", "number", "text", "text", "text", "number", "number", "number", "text", "text", "text", "text", "text", "text", "time", "time", "text", "number", "number", "number", "number", "text", "number", "number", "number", "number", "time", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 10, 14, 18, 23, 28, 32, 44, 49, 52]}, "db_foreign_keys": {"column_id": [19, 24, 34, 33, 47, 46, 45, 51, 50, 56, 55], "other_column_id": [14, 10, 1, 1, 32, 28, 18, 44, 10, 52, 49]}}, {"query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "question": "Find the semester when both Master students and Bachelor students got enrolled in.", "db_id": "student_transcripts_tracking", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Addresses", "Courses", "Departments", "Degree_Programs", "Sections", "Semesters", "Students", "Student_Enrolment", "Student_Enrolment_Courses", "Transcripts", "Transcript_Contents"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10], "column_name": ["*", "address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details", "course_id", "course_name", "course_description", "other_details", "department_id", "department_name", "department_description", "other_details", "degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details", "section_id", "course_id", "section_name", "section_description", "other_details", "semester_id", "semester_name", "semester_description", "other_details", "student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details", "student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details", "student_course_id", "course_id", "student_enrolment_id", "transcript_id", "transcript_date", "other_details", "student_course_id", "transcript_id"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "text", "text", "number", "number", "text", "text", "text", "number", "number", "text", "text", "text", "number", "text", "text", "text", "number", "number", "number", "text", "text", "text", "text", "text", "text", "time", "time", "text", "number", "number", "number", "number", "text", "number", "number", "number", "number", "time", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 10, 14, 18, 23, 28, 32, 44, 49, 52]}, "db_foreign_keys": {"column_id": [19, 24, 34, 33, 47, 46, 45, 51, 50, 56, 55], "other_column_id": [14, 10, 1, 1, 32, 28, 18, 44, 10, 52, 49]}}, {"query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "question": "What is the date and id of the transcript with at least 2 courses listed?", "db_id": "student_transcripts_tracking", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Addresses", "Courses", "Departments", "Degree_Programs", "Sections", "Semesters", "Students", "Student_Enrolment", "Student_Enrolment_Courses", "Transcripts", "Transcript_Contents"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10], "column_name": ["*", "address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details", "course_id", "course_name", "course_description", "other_details", "department_id", "department_name", "department_description", "other_details", "degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details", "section_id", "course_id", "section_name", "section_description", "other_details", "semester_id", "semester_name", "semester_description", "other_details", "student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details", "student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details", "student_course_id", "course_id", "student_enrolment_id", "transcript_id", "transcript_date", "other_details", "student_course_id", "transcript_id"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "text", "text", "number", "number", "text", "text", "text", "number", "number", "text", "text", "text", "number", "text", "text", "text", "number", "number", "number", "text", "text", "text", "text", "text", "text", "time", "time", "text", "number", "number", "number", "number", "text", "number", "number", "number", "number", "time", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 10, 14, 18, 23, 28, 32, 44, 49, 52]}, "db_foreign_keys": {"column_id": [19, 24, 34, 33, 47, 46, 45, 51, 50, 56, 55], "other_column_id": [14, 10, 1, 1, 32, 28, 18, 44, 10, 52, 49]}}, {"query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "question": "What is the zip code of the address in the city Port Chelsea?", "db_id": "student_transcripts_tracking", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Addresses", "Courses", "Departments", "Degree_Programs", "Sections", "Semesters", "Students", "Student_Enrolment", "Student_Enrolment_Courses", "Transcripts", "Transcript_Contents"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10], "column_name": ["*", "address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details", "course_id", "course_name", "course_description", "other_details", "department_id", "department_name", "department_description", "other_details", "degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details", "section_id", "course_id", "section_name", "section_description", "other_details", "semester_id", "semester_name", "semester_description", "other_details", "student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details", "student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details", "student_course_id", "course_id", "student_enrolment_id", "transcript_id", "transcript_date", "other_details", "student_course_id", "transcript_id"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "text", "text", "number", "number", "text", "text", "text", "number", "number", "text", "text", "text", "number", "text", "text", "text", "number", "number", "number", "text", "text", "text", "text", "text", "text", "time", "time", "text", "number", "number", "number", "number", "text", "number", "number", "number", "number", "time", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 10, 14, 18, 23, 28, 32, 44, 49, 52]}, "db_foreign_keys": {"column_id": [19, 24, 34, 33, 47, 46, 45, 51, 50, 56, 55], "other_column_id": [14, 10, 1, 1, 32, 28, 18, 44, 10, 52, 49]}}, {"query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "question": "What is the date and id of the transcript with the least number of results?", "db_id": "student_transcripts_tracking", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Addresses", "Courses", "Departments", "Degree_Programs", "Sections", "Semesters", "Students", "Student_Enrolment", "Student_Enrolment_Courses", "Transcripts", "Transcript_Contents"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10], "column_name": ["*", "address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details", "course_id", "course_name", "course_description", "other_details", "department_id", "department_name", "department_description", "other_details", "degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details", "section_id", "course_id", "section_name", "section_description", "other_details", "semester_id", "semester_name", "semester_description", "other_details", "student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details", "student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details", "student_course_id", "course_id", "student_enrolment_id", "transcript_id", "transcript_date", "other_details", "student_course_id", "transcript_id"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "text", "text", "number", "number", "text", "text", "text", "number", "number", "text", "text", "text", "number", "text", "text", "text", "number", "number", "number", "text", "text", "text", "text", "text", "text", "time", "time", "text", "number", "number", "number", "number", "text", "number", "number", "number", "number", "time", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 10, 14, 18, 23, 28, 32, 44, 49, 52]}, "db_foreign_keys": {"column_id": [19, 24, 34, 33, 47, 46, 45, 51, 50, 56, 55], "other_column_id": [14, 10, 1, 1, 32, 28, 18, 44, 10, 52, 49]}}, {"query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "question": "What is the id, line 1, and line 2 of the address with the most students?", "db_id": "student_transcripts_tracking", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Addresses", "Courses", "Departments", "Degree_Programs", "Sections", "Semesters", "Students", "Student_Enrolment", "Student_Enrolment_Courses", "Transcripts", "Transcript_Contents"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10], "column_name": ["*", "address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details", "course_id", "course_name", "course_description", "other_details", "department_id", "department_name", "department_description", "other_details", "degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details", "section_id", "course_id", "section_name", "section_description", "other_details", "semester_id", "semester_name", "semester_description", "other_details", "student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details", "student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details", "student_course_id", "course_id", "student_enrolment_id", "transcript_id", "transcript_date", "other_details", "student_course_id", "transcript_id"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "text", "text", "number", "number", "text", "text", "text", "number", "number", "text", "text", "text", "number", "text", "text", "text", "number", "number", "number", "text", "text", "text", "text", "text", "text", "time", "time", "text", "number", "number", "number", "number", "text", "number", "number", "number", "number", "time", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 10, 14, 18, 23, 28, 32, 44, 49, 52]}, "db_foreign_keys": {"column_id": [19, 24, 34, 33, 47, 46, 45, 51, 50, 56, 55], "other_column_id": [14, 10, 1, 1, 32, 28, 18, 44, 10, 52, 49]}}, {"query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "question": "List all the student details in reversed lexicographical order.", "db_id": "student_transcripts_tracking", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Addresses", "Courses", "Departments", "Degree_Programs", "Sections", "Semesters", "Students", "Student_Enrolment", "Student_Enrolment_Courses", "Transcripts", "Transcript_Contents"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10], "column_name": ["*", "address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details", "course_id", "course_name", "course_description", "other_details", "department_id", "department_name", "department_description", "other_details", "degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details", "section_id", "course_id", "section_name", "section_description", "other_details", "semester_id", "semester_name", "semester_description", "other_details", "student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details", "student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details", "student_course_id", "course_id", "student_enrolment_id", "transcript_id", "transcript_date", "other_details", "student_course_id", "transcript_id"]}, "db_column_types": ["text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "text", "text", "number", "number", "text", "text", "text", "number", "number", "text", "text", "text", "number", "text", "text", "text", "number", "number", "number", "text", "text", "text", "text", "text", "text", "time", "time", "text", "number", "number", "number", "number", "text", "number", "number", "number", "number", "time", "text", "number", "number"], "db_primary_keys": {"column_id": [1, 10, 14, 18, 23, 28, 32, 44, 49, 52]}, "db_foreign_keys": {"column_id": [19, 24, 34, 33, 47, 46, 45, 51, 50, 56, 55], "other_column_id": [14, 10, 1, 1, 32, 28, 18, 44, 10, 52, 49]}}, {"query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "question": "list all cartoon titles and their directors ordered by their air date", "db_id": "tvshow", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["TV_Channel", "TV_series", "Cartoon"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2], "column_name": ["*", "id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option", "id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel", "id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "db_column_types": ["text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "text", "number", "text", "number", "text", "text", "text", "text", "number", "text"], "db_primary_keys": {"column_id": [1, 10, 19]}, "db_foreign_keys": {"column_id": [18, 25], "other_column_id": [1, 1]}}, {"query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "db_id": "tvshow", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["TV_Channel", "TV_series", "Cartoon"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2], "column_name": ["*", "id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option", "id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel", "id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "db_column_types": ["text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "text", "number", "text", "number", "text", "text", "text", "text", "number", "text"], "db_primary_keys": {"column_id": [1, 10, 19]}, "db_foreign_keys": {"column_id": [18, 25], "other_column_id": [1, 1]}}, {"query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "db_id": "tvshow", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["TV_Channel", "TV_series", "Cartoon"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2], "column_name": ["*", "id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option", "id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel", "id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "db_column_types": ["text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "text", "number", "text", "number", "text", "text", "text", "text", "number", "text"], "db_primary_keys": {"column_id": [1, 10, 19]}, "db_foreign_keys": {"column_id": [18, 25], "other_column_id": [1, 1]}}, {"query": "SELECT Episode FROM TV_series ORDER BY rating", "question": "What are all of the episodes ordered by ratings?", "db_id": "tvshow", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["TV_Channel", "TV_series", "Cartoon"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2], "column_name": ["*", "id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option", "id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel", "id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "db_column_types": ["text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "text", "number", "text", "number", "text", "text", "text", "text", "number", "text"], "db_primary_keys": {"column_id": [1, 10, 19]}, "db_foreign_keys": {"column_id": [18, 25], "other_column_id": [1, 1]}}, {"query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "db_id": "tvshow", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["TV_Channel", "TV_series", "Cartoon"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2], "column_name": ["*", "id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option", "id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel", "id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "db_column_types": ["text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "text", "number", "text", "number", "text", "text", "text", "text", "number", "text"], "db_primary_keys": {"column_id": [1, 10, 19]}, "db_foreign_keys": {"column_id": [18, 25], "other_column_id": [1, 1]}}, {"query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "question": "How many different series and contents are listed in the TV Channel table?", "db_id": "tvshow", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["TV_Channel", "TV_series", "Cartoon"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2], "column_name": ["*", "id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option", "id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel", "id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "db_column_types": ["text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "text", "number", "text", "number", "text", "text", "text", "text", "number", "text"], "db_primary_keys": {"column_id": [1, 10, 19]}, "db_foreign_keys": {"column_id": [18, 25], "other_column_id": [1, 1]}}, {"query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "question": "What are the names of all cartoons directed by Ben Jones?", "db_id": "tvshow", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["TV_Channel", "TV_series", "Cartoon"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2], "column_name": ["*", "id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option", "id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel", "id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "db_column_types": ["text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "text", "number", "text", "number", "text", "text", "text", "text", "number", "text"], "db_primary_keys": {"column_id": [1, 10, 19]}, "db_foreign_keys": {"column_id": [18, 25], "other_column_id": [1, 1]}}, {"query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "question": "When did the episode \"A Love of a Lifetime\" air?", "db_id": "tvshow", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["TV_Channel", "TV_series", "Cartoon"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2], "column_name": ["*", "id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option", "id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel", "id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "db_column_types": ["text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "text", "number", "text", "number", "text", "text", "text", "text", "number", "text"], "db_primary_keys": {"column_id": [1, 10, 19]}, "db_foreign_keys": {"column_id": [18, 25], "other_column_id": [1, 1]}}, {"query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "question": "What is the birth date of the poker player with the lowest earnings?", "db_id": "poker_player", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["poker_player", "people"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings", "People_ID", "Nationality", "Name", "Birth_Date", "Height"]}, "db_column_types": ["text", "number", "number", "number", "number", "number", "number", "number", "text", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 7]}, "db_foreign_keys": {"column_id": [2], "other_column_id": [7]}}, {"query": "SELECT count(DISTINCT Nationality) FROM people", "question": "Count the number of different nationalities.", "db_id": "poker_player", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["poker_player", "people"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings", "People_ID", "Nationality", "Name", "Birth_Date", "Height"]}, "db_column_types": ["text", "number", "number", "number", "number", "number", "number", "number", "text", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 7]}, "db_foreign_keys": {"column_id": [2], "other_column_id": [7]}}, {"query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "question": "Return the names of all the poker players.", "db_id": "poker_player", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["poker_player", "people"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings", "People_ID", "Nationality", "Name", "Birth_Date", "Height"]}, "db_column_types": ["text", "number", "number", "number", "number", "number", "number", "number", "text", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 7]}, "db_foreign_keys": {"column_id": [2], "other_column_id": [7]}}, {"query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "db_id": "poker_player", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["poker_player", "people"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings", "People_ID", "Nationality", "Name", "Birth_Date", "Height"]}, "db_column_types": ["text", "number", "number", "number", "number", "number", "number", "number", "text", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 7]}, "db_foreign_keys": {"column_id": [2], "other_column_id": [7]}}, {"query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "question": "What is the money rank of the poker player with the highest earnings?", "db_id": "poker_player", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["poker_player", "people"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings", "People_ID", "Nationality", "Name", "Birth_Date", "Height"]}, "db_column_types": ["text", "number", "number", "number", "number", "number", "number", "number", "text", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 7]}, "db_foreign_keys": {"column_id": [2], "other_column_id": [7]}}, {"query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "question": "List the names of people that are not poker players.", "db_id": "poker_player", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["poker_player", "people"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings", "People_ID", "Nationality", "Name", "Birth_Date", "Height"]}, "db_column_types": ["text", "number", "number", "number", "number", "number", "number", "number", "text", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 7]}, "db_foreign_keys": {"column_id": [2], "other_column_id": [7]}}, {"query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "question": "What are the nationalities that are shared by at least two people?", "db_id": "poker_player", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["poker_player", "people"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings", "People_ID", "Nationality", "Name", "Birth_Date", "Height"]}, "db_column_types": ["text", "number", "number", "number", "number", "number", "number", "number", "text", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 7]}, "db_foreign_keys": {"column_id": [2], "other_column_id": [7]}}, {"query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "question": "Give average earnings of poker players who are taller than 200.", "db_id": "poker_player", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["poker_player", "people"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings", "People_ID", "Nationality", "Name", "Birth_Date", "Height"]}, "db_column_types": ["text", "number", "number", "number", "number", "number", "number", "number", "text", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 7]}, "db_foreign_keys": {"column_id": [2], "other_column_id": [7]}}, {"query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1", "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?", "db_id": "voter_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["AREA_CODE_STATE", "CONTESTANTS", "VOTES"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "area_code", "state", "contestant_number", "contestant_name", "vote_id", "phone_number", "state", "contestant_number", "created"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "number", "time"], "db_primary_keys": {"column_id": [1, 3, 5]}, "db_foreign_keys": {"column_id": [8, 7], "other_column_id": [3, 2]}}, {"query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "db_id": "voter_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["AREA_CODE_STATE", "CONTESTANTS", "VOTES"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "area_code", "state", "contestant_number", "contestant_name", "vote_id", "phone_number", "state", "contestant_number", "created"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "number", "time"], "db_primary_keys": {"column_id": [1, 3, 5]}, "db_foreign_keys": {"column_id": [8, 7], "other_column_id": [3, 2]}}, {"query": "SELECT max(created) FROM votes WHERE state  =  'CA'", "question": "What is last date created of votes from the state 'CA'?", "db_id": "voter_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["AREA_CODE_STATE", "CONTESTANTS", "VOTES"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "area_code", "state", "contestant_number", "contestant_name", "vote_id", "phone_number", "state", "contestant_number", "created"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "number", "time"], "db_primary_keys": {"column_id": [1, 3, 5]}, "db_foreign_keys": {"column_id": [8, 7], "other_column_id": [3, 2]}}, {"query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2", "question": "What are the contestant numbers and names of the contestants who had at least two votes?", "db_id": "voter_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["AREA_CODE_STATE", "CONTESTANTS", "VOTES"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "area_code", "state", "contestant_number", "contestant_name", "vote_id", "phone_number", "state", "contestant_number", "created"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "number", "time"], "db_primary_keys": {"column_id": [1, 3, 5]}, "db_foreign_keys": {"column_id": [8, 7], "other_column_id": [3, 2]}}, {"query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )", "question": "How many contestants did not get voted?", "db_id": "voter_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["AREA_CODE_STATE", "CONTESTANTS", "VOTES"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "area_code", "state", "contestant_number", "contestant_name", "vote_id", "phone_number", "state", "contestant_number", "created"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "number", "time"], "db_primary_keys": {"column_id": [1, 3, 5]}, "db_foreign_keys": {"column_id": [8, 7], "other_column_id": [3, 2]}}, {"query": "SELECT vote_id ,  phone_number ,  state FROM votes", "question": "List the vote ids, phone numbers and states of all votes.", "db_id": "voter_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["AREA_CODE_STATE", "CONTESTANTS", "VOTES"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "area_code", "state", "contestant_number", "contestant_name", "vote_id", "phone_number", "state", "contestant_number", "created"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "number", "time"], "db_primary_keys": {"column_id": [1, 3, 5]}, "db_foreign_keys": {"column_id": [8, 7], "other_column_id": [3, 2]}}, {"query": "select contestant_name from contestants where contestant_name like \"%al%\"", "question": "Return the names of the contestants whose names contain the substring 'Al' .", "db_id": "voter_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["AREA_CODE_STATE", "CONTESTANTS", "VOTES"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "area_code", "state", "contestant_number", "contestant_name", "vote_id", "phone_number", "state", "contestant_number", "created"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "number", "time"], "db_primary_keys": {"column_id": [1, 3, 5]}, "db_foreign_keys": {"column_id": [8, 7], "other_column_id": [3, 2]}}, {"query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "question": "What are the maximum and minimum values of area codes?", "db_id": "voter_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["AREA_CODE_STATE", "CONTESTANTS", "VOTES"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "area_code", "state", "contestant_number", "contestant_name", "vote_id", "phone_number", "state", "contestant_number", "created"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "number", "time"], "db_primary_keys": {"column_id": [1, 3, 5]}, "db_foreign_keys": {"column_id": [8, 7], "other_column_id": [3, 2]}}, {"query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")", "question": "What are the Asian countries which have a population larger than that of any country in Africa?", "db_id": "world_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["city", "sqlite_sequence", "country", "countrylanguage"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "ID", "Name", "CountryCode", "District", "Population", "name", "seq", "Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2", "CountryCode", "Language", "IsOfficial", "Percentage"]}, "db_column_types": ["text", "number", "text", "text", "text", "number", "text", "text", "text", "text", "text", "text", "number", "number", "number", "number", "number", "number", "text", "text", "text", "number", "text", "text", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 8, 23]}, "db_foreign_keys": {"column_id": [3, 23], "other_column_id": [8, 8]}}, {"query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "question": "What is the total number of languages used in Aruba?", "db_id": "world_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["city", "sqlite_sequence", "country", "countrylanguage"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "ID", "Name", "CountryCode", "District", "Population", "name", "seq", "Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2", "CountryCode", "Language", "IsOfficial", "Percentage"]}, "db_column_types": ["text", "number", "text", "text", "text", "number", "text", "text", "text", "text", "text", "text", "number", "number", "number", "number", "number", "number", "text", "text", "text", "number", "text", "text", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 8, 23]}, "db_foreign_keys": {"column_id": [3, 23], "other_column_id": [8, 8]}}, {"query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "question": "Give the mean life expectancy of countries in which English is not the official language.", "db_id": "world_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["city", "sqlite_sequence", "country", "countrylanguage"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "ID", "Name", "CountryCode", "District", "Population", "name", "seq", "Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2", "CountryCode", "Language", "IsOfficial", "Percentage"]}, "db_column_types": ["text", "number", "text", "text", "text", "number", "text", "text", "text", "text", "text", "text", "number", "number", "number", "number", "number", "number", "text", "text", "text", "number", "text", "text", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 8, 23]}, "db_foreign_keys": {"column_id": [3, 23], "other_column_id": [8, 8]}}, {"query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "question": "How many type of governments are in Africa?", "db_id": "world_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["city", "sqlite_sequence", "country", "countrylanguage"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "ID", "Name", "CountryCode", "District", "Population", "name", "seq", "Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2", "CountryCode", "Language", "IsOfficial", "Percentage"]}, "db_column_types": ["text", "number", "text", "text", "text", "number", "text", "text", "text", "text", "text", "text", "number", "number", "number", "number", "number", "number", "text", "text", "text", "number", "text", "text", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 8, 23]}, "db_foreign_keys": {"column_id": [3, 23], "other_column_id": [8, 8]}}, {"query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "question": "What is the total surface area of the countries in the Caribbean region?", "db_id": "world_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["city", "sqlite_sequence", "country", "countrylanguage"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "ID", "Name", "CountryCode", "District", "Population", "name", "seq", "Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2", "CountryCode", "Language", "IsOfficial", "Percentage"]}, "db_column_types": ["text", "number", "text", "text", "text", "number", "text", "text", "text", "text", "text", "text", "number", "number", "number", "number", "number", "number", "text", "text", "text", "number", "text", "text", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 8, 23]}, "db_foreign_keys": {"column_id": [3, 23], "other_column_id": [8, 8]}}, {"query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "question": "Give the name, population, and head of state for the country that has the largest area.", "db_id": "world_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["city", "sqlite_sequence", "country", "countrylanguage"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "ID", "Name", "CountryCode", "District", "Population", "name", "seq", "Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2", "CountryCode", "Language", "IsOfficial", "Percentage"]}, "db_column_types": ["text", "number", "text", "text", "text", "number", "text", "text", "text", "text", "text", "text", "number", "number", "number", "number", "number", "number", "text", "text", "text", "number", "text", "text", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 8, 23]}, "db_foreign_keys": {"column_id": [3, 23], "other_column_id": [8, 8]}}, {"query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "question": "What is the continent name which Anguilla belongs to?", "db_id": "world_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["city", "sqlite_sequence", "country", "countrylanguage"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "ID", "Name", "CountryCode", "District", "Population", "name", "seq", "Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2", "CountryCode", "Language", "IsOfficial", "Percentage"]}, "db_column_types": ["text", "number", "text", "text", "text", "number", "text", "text", "text", "text", "text", "text", "number", "number", "number", "number", "number", "number", "text", "text", "text", "number", "text", "text", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 8, 23]}, "db_foreign_keys": {"column_id": [3, 23], "other_column_id": [8, 8]}}, {"query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "question": "Return the country codes for countries that do not speak English.", "db_id": "world_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["city", "sqlite_sequence", "country", "countrylanguage"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "ID", "Name", "CountryCode", "District", "Population", "name", "seq", "Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2", "CountryCode", "Language", "IsOfficial", "Percentage"]}, "db_column_types": ["text", "number", "text", "text", "text", "number", "text", "text", "text", "text", "text", "text", "number", "number", "number", "number", "number", "number", "text", "text", "text", "number", "text", "text", "text", "text", "number"], "db_primary_keys": {"column_id": [1, 8, 23]}, "db_foreign_keys": {"column_id": [3, 23], "other_column_id": [8, 8]}}, {"query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "question": "How many orchestras does each record company manage?", "db_id": "orchestra", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["conductor", "orchestra", "performance", "show"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], "column_name": ["*", "Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work", "Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format", "Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share", "Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "number", "text", "number", "text", "number", "number", "text", "text", "number", "text", "text", "number", "number", "others", "text", "number"], "db_primary_keys": {"column_id": [1, 6, 12]}, "db_foreign_keys": {"column_id": [8, 13, 20], "other_column_id": [1, 6, 12]}}, {"query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "question": "What are the record companies of orchestras in descending order of years in which they were founded?", "db_id": "orchestra", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["conductor", "orchestra", "performance", "show"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], "column_name": ["*", "Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work", "Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format", "Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share", "Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "number", "text", "number", "text", "number", "number", "text", "text", "number", "text", "text", "number", "number", "others", "text", "number"], "db_primary_keys": {"column_id": [1, 6, 12]}, "db_foreign_keys": {"column_id": [8, 13, 20], "other_column_id": [1, 6, 12]}}, {"query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "db_id": "orchestra", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["conductor", "orchestra", "performance", "show"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], "column_name": ["*", "Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work", "Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format", "Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share", "Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "number", "text", "number", "text", "number", "number", "text", "text", "number", "text", "text", "number", "number", "others", "text", "number"], "db_primary_keys": {"column_id": [1, 6, 12]}, "db_foreign_keys": {"column_id": [8, 13, 20], "other_column_id": [1, 6, 12]}}, {"query": "SELECT count(DISTINCT Nationality) FROM conductor", "question": "How many different nationalities do conductors have?", "db_id": "orchestra", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["conductor", "orchestra", "performance", "show"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], "column_name": ["*", "Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work", "Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format", "Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share", "Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "number", "text", "number", "text", "number", "number", "text", "text", "number", "text", "text", "number", "number", "others", "text", "number"], "db_primary_keys": {"column_id": [1, 6, 12]}, "db_foreign_keys": {"column_id": [8, 13, 20], "other_column_id": [1, 6, 12]}}, {"query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "db_id": "orchestra", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["conductor", "orchestra", "performance", "show"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], "column_name": ["*", "Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work", "Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format", "Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share", "Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "number", "text", "number", "text", "number", "number", "text", "text", "number", "text", "text", "number", "number", "others", "text", "number"], "db_primary_keys": {"column_id": [1, 6, 12]}, "db_foreign_keys": {"column_id": [8, 13, 20], "other_column_id": [1, 6, 12]}}, {"query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "question": "What is the name of the conductor who has worked the greatest number of years?", "db_id": "orchestra", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["conductor", "orchestra", "performance", "show"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], "column_name": ["*", "Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work", "Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format", "Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share", "Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "number", "text", "number", "text", "number", "number", "text", "text", "number", "text", "text", "number", "number", "others", "text", "number"], "db_primary_keys": {"column_id": [1, 6, 12]}, "db_foreign_keys": {"column_id": [8, 13, 20], "other_column_id": [1, 6, 12]}}, {"query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "question": "List the names of orchestras that have no performance.", "db_id": "orchestra", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["conductor", "orchestra", "performance", "show"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], "column_name": ["*", "Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work", "Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format", "Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share", "Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "number", "text", "number", "text", "number", "number", "text", "text", "number", "text", "text", "number", "number", "others", "text", "number"], "db_primary_keys": {"column_id": [1, 6, 12]}, "db_foreign_keys": {"column_id": [8, 13, 20], "other_column_id": [1, 6, 12]}}, {"query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "db_id": "orchestra", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["conductor", "orchestra", "performance", "show"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], "column_name": ["*", "Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work", "Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format", "Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share", "Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "db_column_types": ["text", "number", "text", "number", "text", "number", "number", "text", "number", "text", "number", "text", "number", "number", "text", "text", "number", "text", "text", "number", "number", "others", "text", "number"], "db_primary_keys": {"column_id": [1, 6, 12]}, "db_foreign_keys": {"column_id": [8, 13, 20], "other_column_id": [1, 6, 12]}}, {"query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "question": "What are the names of students who have 2 or more likes?", "db_id": "network_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Highschooler", "Friend", "Likes"], "db_column_names": {"table_id": [-1, 0, 0, 0, 1, 1, 2, 2], "column_name": ["*", "ID", "name", "grade", "student_id", "friend_id", "student_id", "liked_id"]}, "db_column_types": ["text", "number", "text", "number", "number", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 4, 6]}, "db_foreign_keys": {"column_id": [5, 4, 6, 7], "other_column_id": [1, 1, 1, 1]}}, {"query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "db_id": "network_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Highschooler", "Friend", "Likes"], "db_column_names": {"table_id": [-1, 0, 0, 0, 1, 1, 2, 2], "column_name": ["*", "ID", "name", "grade", "student_id", "friend_id", "student_id", "liked_id"]}, "db_column_types": ["text", "number", "text", "number", "number", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 4, 6]}, "db_foreign_keys": {"column_id": [5, 4, 6, 7], "other_column_id": [1, 1, 1, 1]}}, {"query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "question": "Count the number of likes for each student id.", "db_id": "network_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Highschooler", "Friend", "Likes"], "db_column_names": {"table_id": [-1, 0, 0, 0, 1, 1, 2, 2], "column_name": ["*", "ID", "name", "grade", "student_id", "friend_id", "student_id", "liked_id"]}, "db_column_types": ["text", "number", "text", "number", "number", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 4, 6]}, "db_foreign_keys": {"column_id": [5, 4, 6, 7], "other_column_id": [1, 1, 1, 1]}}, {"query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "question": "How many friends does the high school student Kyle have?", "db_id": "network_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Highschooler", "Friend", "Likes"], "db_column_names": {"table_id": [-1, 0, 0, 0, 1, 1, 2, 2], "column_name": ["*", "ID", "name", "grade", "student_id", "friend_id", "student_id", "liked_id"]}, "db_column_types": ["text", "number", "text", "number", "number", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 4, 6]}, "db_foreign_keys": {"column_id": [5, 4, 6, 7], "other_column_id": [1, 1, 1, 1]}}, {"query": "SELECT count(*) FROM Highschooler", "question": "How many high schoolers are there?", "db_id": "network_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Highschooler", "Friend", "Likes"], "db_column_names": {"table_id": [-1, 0, 0, 0, 1, 1, 2, 2], "column_name": ["*", "ID", "name", "grade", "student_id", "friend_id", "student_id", "liked_id"]}, "db_column_types": ["text", "number", "text", "number", "number", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 4, 6]}, "db_foreign_keys": {"column_id": [5, 4, 6, 7], "other_column_id": [1, 1, 1, 1]}}, {"query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "question": "Return the grade for the high schooler named Kyle.", "db_id": "network_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Highschooler", "Friend", "Likes"], "db_column_names": {"table_id": [-1, 0, 0, 0, 1, 1, 2, 2], "column_name": ["*", "ID", "name", "grade", "student_id", "friend_id", "student_id", "liked_id"]}, "db_column_types": ["text", "number", "text", "number", "number", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 4, 6]}, "db_foreign_keys": {"column_id": [5, 4, 6, 7], "other_column_id": [1, 1, 1, 1]}}, {"query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "question": "What are the names of students who have no friends?", "db_id": "network_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Highschooler", "Friend", "Likes"], "db_column_names": {"table_id": [-1, 0, 0, 0, 1, 1, 2, 2], "column_name": ["*", "ID", "name", "grade", "student_id", "friend_id", "student_id", "liked_id"]}, "db_column_types": ["text", "number", "text", "number", "number", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 4, 6]}, "db_foreign_keys": {"column_id": [5, 4, 6, 7], "other_column_id": [1, 1, 1, 1]}}, {"query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "question": "Show names of all high school students who do not have any friends.", "db_id": "network_1", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Highschooler", "Friend", "Likes"], "db_column_names": {"table_id": [-1, 0, 0, 0, 1, 1, 2, 2], "column_name": ["*", "ID", "name", "grade", "student_id", "friend_id", "student_id", "liked_id"]}, "db_column_types": ["text", "number", "text", "number", "number", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 4, 6]}, "db_foreign_keys": {"column_id": [5, 4, 6, 7], "other_column_id": [1, 1, 1, 1]}}, {"query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "question": "How many owners temporarily do not have any dogs?", "db_id": "dog_kennels", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_column_types": ["text", "text", "text", "number", "text", "number", "text", "text", "text", "text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text", "text", "text", "text", "text", "time", "text", "text", "time", "time", "time", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "number", "text", "time", "number"], "db_primary_keys": {"column_id": [1, 3, 6, 8, 10, 20, 33, 44]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}}, {"query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "question": "Find the first names that are used for professionals or owners but are not used as dog names.", "db_id": "dog_kennels", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_column_types": ["text", "text", "text", "number", "text", "number", "text", "text", "text", "text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text", "text", "text", "text", "text", "time", "text", "text", "time", "time", "time", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "number", "text", "time", "number"], "db_primary_keys": {"column_id": [1, 3, 6, 8, 10, 20, 33, 44]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}}, {"query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "question": "What are the email, cell phone and home phone of each professional?", "db_id": "dog_kennels", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_column_types": ["text", "text", "text", "number", "text", "number", "text", "text", "text", "text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text", "text", "text", "text", "text", "time", "text", "text", "time", "time", "time", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "number", "text", "time", "number"], "db_primary_keys": {"column_id": [1, 3, 6, 8, 10, 20, 33, 44]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}}, {"query": "SELECT count(DISTINCT professional_id) FROM Treatments", "question": "Find the number of professionals who have ever treated dogs.", "db_id": "dog_kennels", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_column_types": ["text", "text", "text", "number", "text", "number", "text", "text", "text", "text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text", "text", "text", "text", "text", "time", "text", "text", "time", "time", "time", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "number", "text", "time", "number"], "db_primary_keys": {"column_id": [1, 3, 6, 8, 10, 20, 33, 44]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}}, {"query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "question": "List the email, cell phone and home phone of all the professionals.", "db_id": "dog_kennels", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_column_types": ["text", "text", "text", "number", "text", "number", "text", "text", "text", "text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text", "text", "text", "text", "text", "time", "text", "text", "time", "time", "time", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "number", "text", "time", "number"], "db_primary_keys": {"column_id": [1, 3, 6, 8, 10, 20, 33, 44]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}}, {"query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "db_id": "dog_kennels", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_column_types": ["text", "text", "text", "number", "text", "number", "text", "text", "text", "text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text", "text", "text", "text", "text", "time", "text", "text", "time", "time", "time", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "number", "text", "time", "number"], "db_primary_keys": {"column_id": [1, 3, 6, 8, 10, 20, 33, 44]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}}, {"query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "question": "How many professionals did not operate any treatment on dogs?", "db_id": "dog_kennels", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_column_types": ["text", "text", "text", "number", "text", "number", "text", "text", "text", "text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text", "text", "text", "text", "text", "time", "text", "text", "time", "time", "time", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "number", "text", "time", "number"], "db_primary_keys": {"column_id": [1, 3, 6, 8, 10, 20, 33, 44]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}}, {"query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "db_id": "dog_kennels", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_column_types": ["text", "text", "text", "number", "text", "number", "text", "text", "text", "text", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text", "text", "text", "text", "text", "time", "text", "text", "time", "time", "time", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "number", "text", "time", "number"], "db_primary_keys": {"column_id": [1, 3, 6, 8, 10, 20, 33, 44]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}}, {"query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "question": "Please show the most common citizenship of singers.", "db_id": "singer", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_column_types": ["text", "number", "text", "number", "number", "text", "number", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 6]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}}, {"query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "question": "What are the names of the singers that have more than one songs?", "db_id": "singer", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_column_types": ["text", "number", "text", "number", "number", "text", "number", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 6]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}}, {"query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "question": "For each citizenship, how many singers are from that country?", "db_id": "singer", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_column_types": ["text", "number", "text", "number", "number", "text", "number", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 6]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}}, {"query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "question": "Show the name of singers whose birth year is either 1948 or 1949?", "db_id": "singer", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_column_types": ["text", "number", "text", "number", "number", "text", "number", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 6]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}}, {"query": "SELECT Birth_Year ,  Citizenship FROM singer", "question": "What are the birth year and citizenship of singers?", "db_id": "singer", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_column_types": ["text", "number", "text", "number", "number", "text", "number", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 6]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}}, {"query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "question": "Show the names of singers that have more than one song.", "db_id": "singer", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_column_types": ["text", "number", "text", "number", "number", "text", "number", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 6]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}}, {"query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "db_id": "singer", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_column_types": ["text", "number", "text", "number", "number", "text", "number", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 6]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}}, {"query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "question": "What is the sname of every sing that does not have any song?", "db_id": "singer", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_column_types": ["text", "number", "text", "number", "number", "text", "number", "text", "number", "number", "number"], "db_primary_keys": {"column_id": [1, 6]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}}, {"query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "question": "What is the feature type name of feature AirCon?", "db_id": "real_estate_properties", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Ref_Feature_Types", "Ref_Property_Types", "Other_Available_Features", "Properties", "Other_Property_Features"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4], "column_name": ["*", "feature_type_code", "feature_type_name", "property_type_code", "property_type_description", "feature_id", "feature_type_code", "feature_name", "feature_description", "property_id", "property_type_code", "date_on_market", "date_sold", "property_name", "property_address", "room_count", "vendor_requested_price", "buyer_offered_price", "agreed_selling_price", "apt_feature_1", "apt_feature_2", "apt_feature_3", "fld_feature_1", "fld_feature_2", "fld_feature_3", "hse_feature_1", "hse_feature_2", "hse_feature_3", "oth_feature_1", "oth_feature_2", "oth_feature_3", "shp_feature_1", "shp_feature_2", "shp_feature_3", "other_property_details", "property_id", "feature_id", "property_feature_description"]}, "db_column_types": ["text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "time", "time", "text", "text", "number", "number", "number", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text"], "db_primary_keys": {"column_id": [1, 3, 5, 9]}, "db_foreign_keys": {"column_id": [6, 10, 35, 36], "other_column_id": [1, 3, 9, 5]}}, {"query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "question": "Show the property type descriptions of properties belonging to that code.", "db_id": "real_estate_properties", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Ref_Feature_Types", "Ref_Property_Types", "Other_Available_Features", "Properties", "Other_Property_Features"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4], "column_name": ["*", "feature_type_code", "feature_type_name", "property_type_code", "property_type_description", "feature_id", "feature_type_code", "feature_name", "feature_description", "property_id", "property_type_code", "date_on_market", "date_sold", "property_name", "property_address", "room_count", "vendor_requested_price", "buyer_offered_price", "agreed_selling_price", "apt_feature_1", "apt_feature_2", "apt_feature_3", "fld_feature_1", "fld_feature_2", "fld_feature_3", "hse_feature_1", "hse_feature_2", "hse_feature_3", "oth_feature_1", "oth_feature_2", "oth_feature_3", "shp_feature_1", "shp_feature_2", "shp_feature_3", "other_property_details", "property_id", "feature_id", "property_feature_description"]}, "db_column_types": ["text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "time", "time", "text", "text", "number", "number", "number", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text"], "db_primary_keys": {"column_id": [1, 3, 5, 9]}, "db_foreign_keys": {"column_id": [6, 10, 35, 36], "other_column_id": [1, 3, 9, 5]}}, {"query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "question": "What are the names of properties that are either houses or apartments with more than 1 room?", "db_id": "real_estate_properties", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Ref_Feature_Types", "Ref_Property_Types", "Other_Available_Features", "Properties", "Other_Property_Features"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4], "column_name": ["*", "feature_type_code", "feature_type_name", "property_type_code", "property_type_description", "feature_id", "feature_type_code", "feature_name", "feature_description", "property_id", "property_type_code", "date_on_market", "date_sold", "property_name", "property_address", "room_count", "vendor_requested_price", "buyer_offered_price", "agreed_selling_price", "apt_feature_1", "apt_feature_2", "apt_feature_3", "fld_feature_1", "fld_feature_2", "fld_feature_3", "hse_feature_1", "hse_feature_2", "hse_feature_3", "oth_feature_1", "oth_feature_2", "oth_feature_3", "shp_feature_1", "shp_feature_2", "shp_feature_3", "other_property_details", "property_id", "feature_id", "property_feature_description"]}, "db_column_types": ["text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "time", "time", "text", "text", "number", "number", "number", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text"], "db_primary_keys": {"column_id": [1, 3, 5, 9]}, "db_foreign_keys": {"column_id": [6, 10, 35, 36], "other_column_id": [1, 3, 9, 5]}}, {"query": "SELECT count(*) FROM Other_Available_Features", "question": "How many available features are there in total?", "db_id": "real_estate_properties", "db_path": "/mnt/lustre/yejiacheng/.cache/huggingface/datasets/downloads/extracted/8fe2e046076bdbe19da0b7efd34286fcce584c540496f449083439f197555ce4/spider/database", "db_table_names": ["Ref_Feature_Types", "Ref_Property_Types", "Other_Available_Features", "Properties", "Other_Property_Features"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4], "column_name": ["*", "feature_type_code", "feature_type_name", "property_type_code", "property_type_description", "feature_id", "feature_type_code", "feature_name", "feature_description", "property_id", "property_type_code", "date_on_market", "date_sold", "property_name", "property_address", "room_count", "vendor_requested_price", "buyer_offered_price", "agreed_selling_price", "apt_feature_1", "apt_feature_2", "apt_feature_3", "fld_feature_1", "fld_feature_2", "fld_feature_3", "hse_feature_1", "hse_feature_2", "hse_feature_3", "oth_feature_1", "oth_feature_2", "oth_feature_3", "shp_feature_1", "shp_feature_2", "shp_feature_3", "other_property_details", "property_id", "feature_id", "property_feature_description"]}, "db_column_types": ["text", "text", "text", "text", "text", "number", "text", "text", "text", "number", "text", "time", "time", "text", "text", "number", "number", "number", "number", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "number", "number", "text"], "db_primary_keys": {"column_id": [1, 3, 5, 9]}, "db_foreign_keys": {"column_id": [6, 10, 35, 36], "other_column_id": [1, 3, 9, 5]}}]